# List of ARM TTK Test: https://github.com/Azure/arm-ttk/tree/master/arm-ttk/testcases/deploymentTemplate
# test

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - solutions/azure-hub-spoke/*

variables:
- name: serviceConnection
  value: azure-service-connection-mg
- name: resource-group
  value: hub-spoke-$(Build.BuildId)
- name: location
  value: eastus
- name: spec
  value: hub-spoke
- name: spec-version
  value: $(Build.BuildId)
- name: ttk-skip-test
  value: 'Location-Should-Not-Be-Hardcoded,IDs-Should-Be-Derived-From-ResourceIDs,DependsOn-Best-Practices,Template-Should-Not-Contain-Blanks'
- name: template-location
  value: '/solutions/azure-hub-spoke/*'
- name: template-name
  value: 'azuredeploy.json'

stages:

# Run ARM TTK and publish test results
- stage: staticanalysis

  jobs:
  - job: armttk
    pool:
      # Sams ARM TTK Extension Windows only
      vmImage: 'windows-latest'
    continueOnError: false
    timeoutInMinutes: 20

    steps:
    
    - task: RunARMTTKTests@1
      inputs:
        templatelocation: '$(System.DefaultWorkingDirectory)$(template-location)'
        resultLocation: '$(System.DefaultWorkingDirectory)'
        skipTests: $(ttk-skip-test)
        
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)\*-armttk.xml'
      condition: always()

# Deploy template (basic)
- stage: deployBasic
  dependsOn: []

  jobs:
  - job: arm
    pool: Hosted Ubuntu 1604
    continueOnError: false

    steps:    
    
    - task: AzureCLI@2
      displayName: Create resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group create --name $(resource-group) --location $(location)'
               
    - task: AzureCLI@2
      displayName: Validate template (validation api)
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         az deployment group validate --resource-group $(resource-group) --template-file $(System.DefaultWorkingDirectory)$(template-location)$(template-name)

    - task: AzureCLI@2
      displayName: Deploy template
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         az deployment group create --resource-group $(resource-group) --template-file $(System.DefaultWorkingDirectory)$(template-location)$(template-name)
        
# Clean up deployment
- stage: cleanupResourceGroupBasic
  dependsOn: deployBasic
  condition: always()

  jobs:
  - job: deleteResourceGroup
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    # - task: AzureCLI@2
    #   displayName: Delete resource group
    #   inputs:
    #     azureSubscription: $(serviceConnection)
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: 'az group delete --resource-group $(resource-group) --yes --no-wait'

# Deploy template (virtual machines)
- stage: deployVM
  dependsOn: []

  jobs:
  - job: arm
    pool: Hosted Ubuntu 1604
    continueOnError: false

    steps:    
    
    - task: AzureCLI@2
      displayName: Create resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group create --name $(resource-group)-vm --location $(location)'
               
    - task: AzureCLI@2
      displayName: Validate template (validation api)
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         az deployment group validate --resource-group $(resource-group)-vm --template-file $(System.DefaultWorkingDirectory)$(template-location)$(template-name) --parameters windowsVMCount=1 linuxVMCount=1 adminPassword=Password2020!

    - task: AzureCLI@2
      displayName: Deploy template
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         az deployment group create --resource-group $(resource-group)-vm --template-file $(System.DefaultWorkingDirectory)$(template-location)$(template-name)
        
# Clean up deployment
- stage: cleanupResourceGroupVM
  dependsOn: deployVM
  condition: always()

  jobs:
  - job: deleteResourceGroup
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    # - task: AzureCLI@2
    #   displayName: Delete resource group
    #   inputs:
    #     azureSubscription: $(serviceConnection)
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: 'az group delete --resource-group $(resource-group)-vm --yes --no-wait'

# Deploy template (VPN Gateway)
- stage: deployVPN
  dependsOn: []

  jobs:
  - job: arm
    pool: Hosted Ubuntu 1604
    continueOnError: false

    steps:    
    
    - task: AzureCLI@2
      displayName: Create resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group create --name $(resource-group)-vpm --location $(location)'
               
    - task: AzureCLI@2
      displayName: Validate template (validation api)
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         az deployment group validate --resource-group $(resource-group)-vpn --template-file $(System.DefaultWorkingDirectory)$(template-location)$(template-name) --parameters deployVpnGateway=true

    - task: AzureCLI@2
      displayName: Deploy template
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         az deployment group create --resource-group $(resource-group)-vpn --template-file $(System.DefaultWorkingDirectory)$(template-location)$(template-name)
        
# Clean up deployment
- stage: cleanupResourceGroupVPN
  dependsOn: deployVPN
  condition: always()

  jobs:
  - job: deleteResourceGroup
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    # - task: AzureCLI@2
    #   displayName: Delete resource group
    #   inputs:
    #     azureSubscription: $(serviceConnection)
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     inlineScript: 'az group delete --resource-group $(resource-group)-vpn --yes --no-wait'