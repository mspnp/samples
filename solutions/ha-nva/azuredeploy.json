{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The Azure Region to use"
            }
        },
        "availabilityZoneCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The number of Availability Zones to use"
            }
        },
        "virtualNetworkName": {
            "defaultValue": "vnet-hanva",
            "type": "String",
            "metadata": {
                "description": "Name of the VNET for all resources"
            }
        },
        "vnetPrefix": {
            "defaultValue": "10.0.0.0/16",
            "type": "String",
            "metadata": {
                "description": "CIDR address space definition for VNet"
            }
        },
        "nvaSubnetPrefix": {
            "defaultValue": "10.0.0.64/27",
            "type": "String",
            "metadata": {
                "description": "CIDR address prefix definition for NVA subnet"
            }
        },
        "webSubnetPrefix": {
            "defaultValue": "10.0.1.0/24",
            "type": "String",
            "metadata": {
                "description": "CIDR address prefix definition for web subnet"
            }
        },
        "appGatewaySubnetPrefix": {
            "defaultValue": "10.0.252.224/27",
            "type": "String",
            "metadata": {
                "description": "CIDR address prefix definition for AppGateway subnet"
            }
        },
        "bastionSubnetPrefix": {
            "defaultValue": "10.0.253.224/27",
            "type": "String",
            "metadata": {
                "description": "CIDR address prefix definition for Bastion subnet"
            }
        },
        "gatewaySubnetPrefix": {
            "defaultValue": "10.0.255.224/27",
            "type": "String",
            "metadata": {
                "description": "CIDR address prefix definition for Gateway subnet"
            }
        },
        "operatingSystemImage": {
            "type": "string",
            "defaultValue": "CentOS 7 (latest, LVM)",
            "allowedValues": [
                "CentOS 7 (latest, LVM)",
                "Red Hat Enterprise Linux 7 (latest, LVM)"
            ],
            "metadata": {
                "description": "OS Image to use for all VMs"
            }
        },
        "adminUserForVMAccess": {
            "type": "String",
            "metadata": {
                "description": "Admin User for all VMs"
            }
        },
        "nvaNetworkSecurityGroupName": {
            "defaultValue": "nsg-nva",
            "type": "String",
            "metadata": {
                "description": "Name of the Network Security Group for the NVA resources"
            }
        },
        "nvaVMNameBase": {
            "defaultValue": "vm-nva",
            "type": "String",
            "metadata": {
                "description": "Prefix for naming NVA VMs"
            }
        },
        "nvaVMCount": {
            "defaultValue": 2,
            "type": "Int",
            "minValue": 0,
            "maxValue": 20,
            "metadata": {
                "description": "How many NVA VMs to provision"
            }
        },
        "nvaVMSize": {
            "defaultValue": "Standard_D2s_v3",
            "type": "String",
            "allowedValues": [
                "Standard_D2s_v3",
                "Standard_D4s_v3"
            ],
            "metadata": {
                "description": "VM size for NVA VMs"
            }
        },
        "webNetworkSecurityGroupName": {
            "defaultValue": "nsg-web",
            "type": "String",
            "metadata": {
                "description": "Name of the Network Security Group for the web resources"
            }
        },
        "webVMNameBase": {
            "defaultValue": "vm-web",
            "type": "String",
            "metadata": {
                "description": "Prefix for naming web VMs"
            }
        },
        "webVMCount": {
            "defaultValue": 2,
            "type": "Int",
            "minValue": 0,
            "maxValue": 20,
            "metadata": {
                "description": "How many web VMs to provision"
            }
        },
        "webVMSize": {
            "defaultValue": "Standard_D2s_v3",
            "type": "String",
            "allowedValues": [
                "Standard_D2s_v3",
                "Standard_D4s_v3"
            ],
            "metadata": {
                "description": "VM size for NVA VMs"
            }
        },
        "gatewayNetworkSecurityGroupName": {
            "defaultValue": "nsg-gateway",
            "type": "String",
            "metadata": {
                "description": "Name of the Network Security Group for the gateway resources"
            }
        },
        "allowConnectionFromIPOrCIDRBlock": {
            "defaultValue": "0.0.0.0/0",
            "type": "string",
            "metadata": {
                "description": "Default value of 0.0.0.0/0 allows management and connections from the entire Internet"
            }
        },
        "deployAzureBastion": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Selection to deploy Azure Bastion"
            }
        },
        "deployIngressAppGatewayWebLoadBalancer": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Selection to deploy the Azure Application Gateway for the NVA VMs and Azure Load Balancer for the web VMs"
            }
        },
        "deployEgressLoadBalancerNva": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Selection to deploy Azure Load Balancer for the NVA VMs"
            }
        },
        "keyVaultEnableSoftDelete": {
            "defaultValue": true,
            "type": "bool",
            "metadata": {
                "description": "Enable delete protection (soft delete) for Key Vault (should always be enabled for production environments)"
            }
        },
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located including a trailing '/' or `deployment().properties.template.uri` to use detected deployment root location"
            },
            "defaultValue": "[deployment().properties.templateLink.uri]"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation"
            },
            "defaultValue": ""
        }
    },
    "variables": {
        "ostag": "[if(equals(parameters('operatingSystemImage'),'Red Hat Enterprise Linux 7 (latest, LVM)'),'RH7x','Cent7x')]",
        "osProfile": {
            "RH7x": {
                "image": {
                    "publisher": "RedHat",
                    "offer": "RHEL",
                    "sku": "7-LVM",
                    "version": "latest"
                }
            },
            "Cent7x": {
                "image": {
                    "offer": "CentOS-LVM",
                    "publisher": "OpenLogic",
                    "sku": "7-LVM",
                    "version": "latest"
                }
            }
        },
        "postInstallActions": {
            "web": {
                "commandToExecute": "sh simpleweb.sh",
                "fileUris": [
                    "[uri(parameters('_artifactsLocation'), concat('scripts/simpleweb.sh', parameters('_artifactsLocationSasToken')))]"
                ]
            },
            "nva": {
                "commandToExecute": "sh simpleproxy.sh",
                "fileUris": [
                    "[uri(parameters('_artifactsLocation'), concat('scripts/simpleproxy.sh', parameters('_artifactsLocationSasToken')))]"
                ]
            }
        },
        "logAnalyticsWorkspaceName": "[concat('la-hanva-',uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "comments": "Log Analytics workspace",
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2020-03-01-preview",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "Free"
                },
                "features": {
                    "searchVersion": 1
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "[parameters('webNetworkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHTTPfromNVAtoWeb",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "80", "443" ],
                            "sourceAddressPrefix": "[parameters('nvaSubnetPrefix')]",
                            "destinationAddressPrefix": "[parameters('webSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowHTTPfromAzureLoadBalancertoWeb",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "80", "443" ],
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "[parameters('webSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowSSHfromBastiontoWeb",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[parameters('bastionSubnetPrefix')]",
                            "destinationAddressPrefix": "[parameters('webSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "InboundDenyAll",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 4000,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('webNetworkSecurityGroupName'),'/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('webNetworkSecurityGroupName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "NetworkSecurityGroupEvent",
                                "enabled": true
                            },
                            {
                                "category": "NetworkSecurityGroupRuleCounter",
                                "enabled": true
                            }
                        ]

                    }
                }
            ]
        },
        {
            "condition": "[parameters('deployEgressLoadBalancerNva')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "UpdateWebNsgDenyOutbound",
            "dependsOn": [
                "ParameterizedWebVM-Copy"
            ],
            "properties": {
                "mode": "Incremental",
                "parameters": {},
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Network/networkSecurityGroups",
                            "apiVersion": "2019-12-01",
                            "name": "[parameters('webNetworkSecurityGroupName')]",
                            "location": "[parameters('location')]",
                            "properties": {
                                "securityRules": [
                                    {
                                        "name": "AllowHTTPfromNVAtoWeb",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRanges": [ "80", "443" ],
                                            "sourceAddressPrefix": "[parameters('nvaSubnetPrefix')]",
                                            "destinationAddressPrefix": "[parameters('webSubnetPrefix')]",
                                            "access": "Allow",
                                            "priority": 100,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "AllowHTTPfromAzureLoadBalancertoWeb",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRanges": [ "80", "443" ],
                                            "sourceAddressPrefix": "AzureLoadBalancer",
                                            "destinationAddressPrefix": "[parameters('webSubnetPrefix')]",
                                            "access": "Allow",
                                            "priority": 110,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "AllowSSHfromBastiontoWeb",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "22",
                                            "sourceAddressPrefix": "[parameters('bastionSubnetPrefix')]",
                                            "destinationAddressPrefix": "[parameters('webSubnetPrefix')]",
                                            "access": "Allow",
                                            "priority": 120,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "InboundDenyAll",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "*",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "*",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Deny",
                                            "priority": 4000,
                                            "direction": "Inbound"
                                        }
                                    },
                                    {
                                        "name": "AllowProxyToNVA",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "TCP",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "8080",
                                            "sourceAddressPrefix": "[parameters('webSubnetPrefix')]",
                                            "destinationAddressPrefix": "[parameters('nvaSubnetPrefix')]",
                                            "access": "Allow",
                                            "priority": 100,
                                            "direction": "Outbound"
                                        }
                                    },
                                    {
                                        "name": "OutboundDenyAll",
                                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                        "properties": {
                                            "protocol": "*",
                                            "sourcePortRange": "*",
                                            "destinationPortRange": "*",
                                            "sourceAddressPrefix": "*",
                                            "destinationAddressPrefix": "*",
                                            "access": "Deny",
                                            "priority": 4000,
                                            "direction": "Outbound"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },

        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "[parameters('nvaNetworkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHTTPfromAppGatewaytoNVA",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "80", "443" ],
                            "sourceAddressPrefix": "[parameters('appGatewaySubnetPrefix')]",
                            "destinationAddressPrefix": "[parameters('nvaSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowHTTPProxyFromWebtoNVA",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "[parameters('webSubnetPrefix')]",
                            "destinationAddressPrefix": "[parameters('nvaSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowSSHfromBastiontoNVA",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "[parameters('bastionSubnetPrefix')]",
                            "destinationAddressPrefix": "[parameters('nvaSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowHTTPProxyHealthFromLoadBalancertoNVA",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "[parameters('nvaSubnetPrefix')]",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound",
                            "destinationPortRange": "8080"
                        }
                    },
                    {
                        "name": "InboundDenyAll",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 4000,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('nvaNetworkSecurityGroupName'),'/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nvaNetworkSecurityGroupName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "NetworkSecurityGroupEvent",
                                "enabled": true
                            },
                            {
                                "category": "NetworkSecurityGroupRuleCounter",
                                "enabled": true
                            }
                        ]

                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-12-01",
            "name": "[parameters('gatewayNetworkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "AllowHttpFromIpOrRangeForWebHttpAndBastion",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "80", "443" ],
                            "sourceAddressPrefix": "[parameters('allowConnectionFromIPOrCIDRBlock')]",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowManagementFromGatewayManagerForBastionAndAppGateway",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "443", "65200-65535" ],
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowManagementFromGatewayManagerForBastionAndAppGateway2", // This rule is only needed to pass deployment validation for the AppGateway
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "65200-65535" ],
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 115,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowLoadBalancerForBastionAndAppGateway",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "443", "80" ],
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowBastionHostCommunication",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [ "8080", "5701" ],
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "InboundDenyAll",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 4000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "AllowSshToVnetForBastion",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowRdpToVnetForBastion",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3389",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "AllowHttpsToAzurecloudForBastion",
                        "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "AzureCloud",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('gatewayNetworkSecurityGroupName'),'/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('gatewayNetworkSecurityGroupName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "NetworkSecurityGroupEvent",
                                "enabled": true
                            },
                            {
                                "category": "NetworkSecurityGroupRuleCounter",
                                "enabled": true
                            }
                        ]

                    }
                }
            ]
        },
        {
            "condition": "[parameters('deployIngressAppGatewayWebLoadBalancer')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ParameterizedAppGateway",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', 'pip-appgateway-hanva')]",
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nested/paramappgateway.json', parameters('_artifactsLocationSasToken')))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "appgatewayName": {
                        "value": "ag-hanva"
                    },
                    "publicIp": {
                        "value": "[resourceId('Microsoft.Network/publicIPAddresses', 'pip-appgateway-hanva')]"
                    },
                    "vnetName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "vnetSubnetName": {
                        "value": "ApplicationGatewaySubnet"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('deployIngressAppGatewayWebLoadBalancer')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ParameterizedLoadBalancerWeb",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nested/paramlb.json', parameters('_artifactsLocationSasToken')))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "loadbalancerName": {
                        "value": "lb-web"
                    },
                    "loadbalancerPort": {
                        "value": 80
                    },
                    "vnetName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "vnetSubnetName": {
                        "value": "snet-web"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    }
                }
            }
        },
        {
            "condition": "[parameters('deployEgressLoadBalancerNva')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "ParameterizedLoadBalancerNVA",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nested/paramlb.json', parameters('_artifactsLocationSasToken')))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "loadbalancerName": {
                        "value": "lb-nva"
                    },
                    "loadbalancerPort": {
                        "value": 8080
                    },
                    "vnetName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "vnetSubnetName": {
                        "value": "snet-nva"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[concat('kv-hanva-',uniqueString(resourceGroup().id))]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [],
                "enableSoftDelete": "[parameters('keyVaultEnableSoftDelete')]"
            },
            "resources": [
                {
                    "type": "Microsoft.KeyVault/vaults/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat('kv-hanva-',uniqueString(resourceGroup().id),'/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "[resourceId('Microsoft.KeyVault/vaults', concat('kv-hanva-',uniqueString(resourceGroup().id)))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "StoreSshKeyinVault",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', concat('kv-hanva-',uniqueString(resourceGroup().id)))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nested/storekeyinkeyvault.json', parameters('_artifactsLocationSasToken')))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vaultName": {
                        "value": "[concat('kv-hanva-',uniqueString(resourceGroup().id))]"
                    },
                    "secretName": {
                        "value": "sshKeyForHANVAVMAccess"
                    },
                    "vaultResourceGroup": {
                        "value": "[resourceGroup().name]"
                    },
                    "vaultSubscriptionId": {
                        "value": "[subscription().subscriptionId]"
                    },
                    "sshGenScript": {
                        "value": "[uri(parameters('_artifactsLocation'), concat('scripts/new-ssh-key.sh', parameters('_artifactsLocationSasToken')))]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('ParameterizedNvaVM-', copyIndex())]",
            "copy": {
                "name": "ParameterizedNvaVM-Copy",
                "count": "[parameters('nvaVMCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'ParameterizedAppGateway')]",
                "[resourceId('Microsoft.Resources/deployments', 'ParameterizedLoadBalancerNVA')]",
                "[resourceId('Microsoft.Resources/deployments', 'ParameterizedLoadBalancerWeb')]",
                "[resourceId('Microsoft.Resources/deployments', 'StoreSshKeyinVault')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nested/paramvm.json', parameters('_artifactsLocationSasToken')))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[concat(parameters('nvaVMNameBase'),'-', copyIndex())]"
                    },
                    "vmSize": {
                        "value": "[parameters('nvaVMSize')]"
                    },
                    "adminUser": {
                        "value": "[parameters('adminUserForVMAccess')]"
                    },
                    "sshPubKey": {
                        "value": "[reference('StoreSshKeyinVault').outputs.outputs.value]"
                    },
                    "vnetName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "vnetSubnetName": {
                        "value": "snet-nva"
                    },
                    "osImage": {
                        "value": "[variables('osProfile')[variables('ostag')]['image']]"
                    },
                    "postInstallActions": {
                        "value": {
                            "commandToExecute": "[concat(variables('postInstallActions')['nva'].commandToExecute,' ',if(parameters('deployIngressAppGatewayWebLoadBalancer'),string(reference('ParameterizedLoadBalancerWeb').outputs.privateIp.value),'NONE'),' ',if(parameters('deployEgressLoadBalancerNva'),parameters('webSubnetPrefix'),'NONE'))]",
                            "fileUris": "[variables('postInstallActions')['nva'].fileUris]"
                        }
                    },
                    "deployPublicIp": {
                        "value": true
                    },
                    "enableIpForwarding": {
                        "value": false
                    },
                    "loadbalancerBackendIdOrEmpty": {
                        "value": "[if(parameters('deployEgressLoadBalancerNva'),resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'lb-nva', 'default-backend'),'')]"
                    },
                    "appgatewayBackendIdOrEmpty": {
                        "value": "[if(parameters('deployIngressAppGatewayWebLoadBalancer'),resourceId('Microsoft.Network/applicationGateways/backendAddressPools', 'ag-hanva', 'default-backend'),'')]"
                    },
                    "availabilityZone": {
                        "value": "[add(1,mod(copyIndex(),parameters('availabilityZoneCount')))]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('ParameterizedWebVM-', copyIndex())]",
            "copy": {
                "name": "ParameterizedWebVM-Copy",
                "count": "[parameters('webVMCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Resources/deployments', 'ParameterizedLoadBalancerWeb')]",
                "[resourceId('Microsoft.Resources/deployments', 'StoreSshKeyinVault')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[uri(parameters('_artifactsLocation'), concat('nested/paramvm.json', parameters('_artifactsLocationSasToken')))]"
                },
                "parameters": {
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "vmName": {
                        "value": "[concat(parameters('webVMNameBase'),'-', copyIndex())]"
                    },
                    "vmSize": {
                        "value": "[parameters('webVMSize')]"
                    },
                    "adminUser": {
                        "value": "[parameters('adminUserForVMAccess')]"
                    },
                    "sshPubKey": {
                        "value": "[reference('StoreSshKeyinVault').outputs.outputs.value]"
                    },
                    "vnetName": {
                        "value": "[parameters('virtualNetworkName')]"
                    },
                    "vnetSubnetName": {
                        "value": "snet-web"
                    },
                    "osImage": {
                        "value": "[variables('osProfile')[variables('ostag')]['image']]"
                    },
                    "postInstallActions": {
                        "value": {
                            "commandToExecute": "[concat(variables('postInstallActions')['web'].commandToExecute,' ',if(parameters('deployEgressLoadBalancerNva'),string(reference('ParameterizedLoadBalancerNva').outputs.privateIp.value),'NONE'))]",
                            "fileUris": "[variables('postInstallActions')['web'].fileUris]"
                        }
                    },
                    "deployPublicIp": {
                        "value": false
                    },
                    "enableIpForwarding": {
                        "value": false
                    },
                    "loadbalancerBackendIdOrEmpty": {
                        "value": "[if(parameters('deployIngressAppGatewayWebLoadBalancer'),resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'lb-web', 'default-backend'),'')]"
                    },
                    "appgatewayBackendIdOrEmpty": {
                        "value": ""
                    },
                    "availabilityZone": {
                        "value": "[add(1,mod(copyIndex(),parameters('availabilityZoneCount')))]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-12-01",
            "name": "[parameters('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('webNetworkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('gatewayNetworkSecurityGroupName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nvaNetworkSecurityGroupName'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('vnetPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "GatewaySubnet",
                        "properties": {
                            "addressPrefix": "[parameters('gatewaySubnetPrefix')]"
                        }
                    },
                    {
                        "name": "ApplicationGatewaySubnet",
                        "properties": {
                            "addressPrefix": "[parameters('appGatewaySubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('gatewayNetworkSecurityGroupName'))]"
                            }
                        }
                    },
                    {
                        "name": "AzureBastionSubnet",
                        "properties": {
                            "addressPrefix": "[parameters('bastionSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('gatewayNetworkSecurityGroupName'))]"
                            }
                        }
                    },
                    {
                        "name": "snet-nva",
                        "properties": {
                            "addressPrefix": "[parameters('nvaSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nvaNetworkSecurityGroupName'))]"
                            }
                        }
                    },
                    {
                        "name": "snet-web",
                        "properties": {
                            "addressPrefix": "[parameters('webSubnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('webNetworkSecurityGroupName'))]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "Microsoft.Network/virtualNetworks/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('virtualNetworkName'),'/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "VMProtectionAlerts",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "condition": "[parameters('deployAzureBastion')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-12-01",
            "name": "pip-bastion-hanva",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "resources": [
                {
                    "condition": "[parameters('deployAzureBastion')]",
                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat('pip-bastion-hanva','/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', 'pip-bastion-hanva')]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "DDoSProtectionNotifications",
                                "enabled": true
                            },
                            {
                                "category": "DDoSMitigationFlowLogs",
                                "enabled": true
                            },
                            {
                                "category": "DDoSMitigationReports",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "condition": "[parameters('deployIngressAppGatewayWebLoadBalancer')]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-12-01",
            "name": "pip-appgateway-hanva",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "resources": [
                {
                    "condition": "[parameters('deployIngressAppGatewayWebLoadBalancer')]",
                    "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat('pip-appgateway-hanva','/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "[resourceId('Microsoft.Network/publicIPAddresses', 'pip-appgateway-hanva')]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "DDoSProtectionNotifications",
                                "enabled": true
                            },
                            {
                                "category": "DDoSMitigationFlowLogs",
                                "enabled": true
                            },
                            {
                                "category": "DDoSMitigationReports",
                                "enabled": true
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        },
        {
            "condition": "[parameters('deployAzureBastion')]",
            "type": "Microsoft.Network/bastionHosts",
            "apiVersion": "2019-12-01",
            "name": "bastion-hanva",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "IpConf",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'pip-bastion-hanva')]"
                            },
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), 'AzureBastionSubnet')]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "Microsoft.Network/bastionHosts/providers/diagnosticSettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat('bastion-hanva','/Microsoft.Insights/default')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "[resourceId('Microsoft.Network/bastionHosts', 'bastion-hanva')]"
                    ],
                    "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]",
                        "logs": [
                            {
                                "category": "BastionAuditLogs",
                                "enabled": true
                            }
                        ]
                    }
                }
            ]
        }
    ]
}