variables:
- name: serviceConnection
  value: azure-service-connection-rickhall
- name: resource-group
  value: validation-mspnp-samples-solutions-hanva-$(Build.BuildId)
- name: location
  value: southeastasia
- name: template-location
  value: '/solutions/ha-nva/*'
- name: template-name
  value: 'azuredeploy.json'
- name: ttk-skip-test
  value: 'DependsOn-Best-Practices,Template-Should-Not-Contain-Blanks,apiVersions-Should-Be-Recent'
- name: artifactsLocationTemplate
  value: 'https://raw.githubusercontent.com/mspnp/samples/REPLACEREF/solutions/ha-nva/'

trigger:
  branches:
    include:
    - master
  paths:
    include:
      - /solutions/ha-nva/*
    exclude:
      - '/solutions/ha-nva/README.md'

pr:
  branches:
    include:
    - master
  paths:
    include:
      - /solutions/ha-nva/*
    exclude:
      - '/solutions/ha-nva/README.md'

schedules:
- cron: "0 12 * * 0"
  displayName: Weekly Sunday build
  branches:
    include:
    - master
  always: true

stages:

# Run ARM TTK and publish test results (Windows only)
- stage: armTemplateToolkit

  jobs:
  - job: armttk
    pool:
      vmImage: 'windows-latest'
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: RunARMTTKTests@1
      inputs:
        templatelocation: '$(System.DefaultWorkingDirectory)$(template-location)'
        resultLocation: '$(System.DefaultWorkingDirectory)'
        skipTests: $(ttk-skip-test)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)\*-armttk.xml'
      condition: always()

# Deploy template
- stage: validateAndDeploy
  dependsOn: []

  jobs:
  - job: arm
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 60

    steps:

    - task: AzureCLI@2
      displayName: Create resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group create --name $(resource-group) --location $(location)'

    - task: AzureCLI@2
      displayName: Validate template (validation api)
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         uriTemplate=$(artifactsLocationTemplate)
         deployUri="${uriTemplate/REPLACEREF/$(Build.SourceVersion)}azuredeploy.json"
         artifactUri="${uriTemplate/REPLACEREF/$(Build.SourceVersion)}"
         echo deployUri=$deployUri artifactUri=$artifactUri
         az deployment group validate --resource-group $(resource-group) --template-uri $deployUri --parameters adminUserForVMAccess=$(vmUser) keyVaultEnableSoftDelete=false

    - task: AzureCLI@2
      displayName: Deploy template
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         uriTemplate=$(artifactsLocationTemplate)
         deployUri="${uriTemplate/REPLACEREF/$(Build.SourceVersion)}azuredeploy.json"
         artifactUri="${uriTemplate/REPLACEREF/$(Build.SourceVersion)}"
         echo deployUri=$deployUri artifactUri=$artifactUri
         az deployment group create --resource-group $(resource-group) --template-uri $deployUri --parameters adminUserForVMAccess=$(vmUser) keyVaultEnableSoftDelete=false

    - task: AzureCLI@2
      displayName: Deploy template (second pass)
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
         uriTemplate=$(artifactsLocationTemplate)
         deployUri="${uriTemplate/REPLACEREF/$(Build.SourceVersion)}azuredeploy.json"
         artifactUri="${uriTemplate/REPLACEREF/$(Build.SourceVersion)}"
         echo deployUri=$deployUri artifactUri=$artifactUri
         az deployment group create --resource-group $(resource-group) --template-uri $deployUri --parameters adminUserForVMAccess=$(vmUser) keyVaultEnableSoftDelete=false

# Clean up deployment
- stage: cleanupResourceGroupBasic
  dependsOn: validateAndDeploy
  condition: always()

  jobs:
  - job: deleteResourceGroup
    pool: Hosted Ubuntu 1604
    continueOnError: false
    timeoutInMinutes: 20

    steps:

    - task: AzureCLI@2
      displayName: Delete resource group
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group delete --resource-group $(resource-group) --yes --no-wait'